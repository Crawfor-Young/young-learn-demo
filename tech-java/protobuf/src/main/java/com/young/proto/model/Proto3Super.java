// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto3Example.proto

package com.young.proto.model;

public final class Proto3Super {
  private Proto3Super() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code TYPE}
   */
  public enum TYPE
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *枚举必须将第一个类型映射为0，并且这个值将作为默认值
     * </pre>
     *
     * <code>TYPE_ONE = 0;</code>
     */
    TYPE_ONE(0),
    /**
     * <code>TYPE_TWO = 1;</code>
     */
    TYPE_TWO(1),
    /**
     * <code>TYPE_THREE = 2;</code>
     */
    TYPE_THREE(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>TYPE_LIKE_THREE = 2;</code>
     */
    public static final TYPE TYPE_LIKE_THREE = TYPE_THREE;
    /**
     * <pre>
     *枚举必须将第一个类型映射为0，并且这个值将作为默认值
     * </pre>
     *
     * <code>TYPE_ONE = 0;</code>
     */
    public static final int TYPE_ONE_VALUE = 0;
    /**
     * <code>TYPE_TWO = 1;</code>
     */
    public static final int TYPE_TWO_VALUE = 1;
    /**
     * <code>TYPE_THREE = 2;</code>
     */
    public static final int TYPE_THREE_VALUE = 2;
    /**
     * <code>TYPE_LIKE_THREE = 2;</code>
     */
    public static final int TYPE_LIKE_THREE_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TYPE valueOf(int value) {
      return forNumber(value);
    }

    public static TYPE forNumber(int value) {
      switch (value) {
        case 0: return TYPE_ONE;
        case 1: return TYPE_TWO;
        case 2: return TYPE_THREE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TYPE>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TYPE> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TYPE>() {
            public TYPE findValueByNumber(int number) {
              return TYPE.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.young.proto.model.Proto3Super.getDescriptor().getEnumTypes().get(0);
    }

    private static final TYPE[] VALUES = {
      TYPE_ONE, TYPE_TWO, TYPE_THREE, TYPE_LIKE_THREE, 
    };

    public static TYPE valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TYPE(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:TYPE)
  }

  public interface RequestPageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:RequestPage)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
     * </pre>
     *
     * <code>repeated .RequestPage.InnerObject inner = 2;</code>
     */
    java.util.List<com.young.proto.model.Proto3Super.RequestPage.InnerObject> 
        getInnerList();
    /**
     * <pre>
     *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
     * </pre>
     *
     * <code>repeated .RequestPage.InnerObject inner = 2;</code>
     */
    com.young.proto.model.Proto3Super.RequestPage.InnerObject getInner(int index);
    /**
     * <pre>
     *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
     * </pre>
     *
     * <code>repeated .RequestPage.InnerObject inner = 2;</code>
     */
    int getInnerCount();
    /**
     * <pre>
     *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
     * </pre>
     *
     * <code>repeated .RequestPage.InnerObject inner = 2;</code>
     */
    java.util.List<? extends com.young.proto.model.Proto3Super.RequestPage.InnerObjectOrBuilder> 
        getInnerOrBuilderList();
    /**
     * <pre>
     *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
     * </pre>
     *
     * <code>repeated .RequestPage.InnerObject inner = 2;</code>
     */
    com.young.proto.model.Proto3Super.RequestPage.InnerObjectOrBuilder getInnerOrBuilder(
        int index);

    /**
     * <pre>
     *singular(singular，不能显式指定，默认)一个格式良好的消息应该有0个或者1个这种字段（但是不能超过1个）proto2中为optional
     * </pre>
     *
     * <code>.TYPE type = 3;</code>
     */
    int getTypeValue();
    /**
     * <pre>
     *singular(singular，不能显式指定，默认)一个格式良好的消息应该有0个或者1个这种字段（但是不能超过1个）proto2中为optional
     * </pre>
     *
     * <code>.TYPE type = 3;</code>
     */
    com.young.proto.model.Proto3Super.TYPE getType();

    /**
     * <pre>
     *在JAVA中的废弃字段，会被加上&#64;Deprecated注释
     * </pre>
     *
     * <code>bool deprecated_field = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated boolean getDeprecatedField();

    /**
     * <pre>
     *从import的proto中导入的类
     * </pre>
     *
     * <code>.com.young.proto.model.extend.OtherObject other = 5;</code>
     */
    boolean hasOther();
    /**
     * <pre>
     *从import的proto中导入的类
     * </pre>
     *
     * <code>.com.young.proto.model.extend.OtherObject other = 5;</code>
     */
    com.young.proto.model.extend.Proto3Extend.OtherObject getOther();
    /**
     * <pre>
     *从import的proto中导入的类
     * </pre>
     *
     * <code>.com.young.proto.model.extend.OtherObject other = 5;</code>
     */
    com.young.proto.model.extend.Proto3Extend.OtherObjectOrBuilder getOtherOrBuilder();

    /**
     * <pre>
     *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
     *value_type可以是任意类型
     *序列化后的顺序和map迭代器的顺序是不确定
     *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
     * </pre>
     *
     * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
     */
    int getTypeMapCount();
    /**
     * <pre>
     *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
     *value_type可以是任意类型
     *序列化后的顺序和map迭代器的顺序是不确定
     *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
     * </pre>
     *
     * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
     */
    boolean containsTypeMap(
        java.lang.String key);
    /**
     * Use {@link #getTypeMapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, com.young.proto.model.Proto3Super.TYPE>
    getTypeMap();
    /**
     * <pre>
     *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
     *value_type可以是任意类型
     *序列化后的顺序和map迭代器的顺序是不确定
     *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
     * </pre>
     *
     * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
     */
    java.util.Map<java.lang.String, com.young.proto.model.Proto3Super.TYPE>
    getTypeMapMap();
    /**
     * <pre>
     *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
     *value_type可以是任意类型
     *序列化后的顺序和map迭代器的顺序是不确定
     *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
     * </pre>
     *
     * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
     */
    com.young.proto.model.Proto3Super.TYPE getTypeMapOrDefault(
        java.lang.String key,
        com.young.proto.model.Proto3Super.TYPE defaultValue);
    /**
     * <pre>
     *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
     *value_type可以是任意类型
     *序列化后的顺序和map迭代器的顺序是不确定
     *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
     * </pre>
     *
     * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
     */
    com.young.proto.model.Proto3Super.TYPE getTypeMapOrThrow(
        java.lang.String key);
    /**
     * Use {@link #getTypeMapValueMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Integer>
    getTypeMapValue();
    /**
     * <pre>
     *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
     *value_type可以是任意类型
     *序列化后的顺序和map迭代器的顺序是不确定
     *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
     * </pre>
     *
     * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
     */
    java.util.Map<java.lang.String, java.lang.Integer>
    getTypeMapValueMap();
    /**
     * <pre>
     *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
     *value_type可以是任意类型
     *序列化后的顺序和map迭代器的顺序是不确定
     *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
     * </pre>
     *
     * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
     */

    int getTypeMapValueOrDefault(
        java.lang.String key,
        int defaultValue);
    /**
     * <pre>
     *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
     *value_type可以是任意类型
     *序列化后的顺序和map迭代器的顺序是不确定
     *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
     * </pre>
     *
     * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
     */

    int getTypeMapValueOrThrow(
        java.lang.String key);

    /**
     * <pre>
     *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
     * </pre>
     *
     * <code>repeated .google.protobuf.Any details = 7;</code>
     */
    java.util.List<com.google.protobuf.Any> 
        getDetailsList();
    /**
     * <pre>
     *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
     * </pre>
     *
     * <code>repeated .google.protobuf.Any details = 7;</code>
     */
    com.google.protobuf.Any getDetails(int index);
    /**
     * <pre>
     *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
     * </pre>
     *
     * <code>repeated .google.protobuf.Any details = 7;</code>
     */
    int getDetailsCount();
    /**
     * <pre>
     *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
     * </pre>
     *
     * <code>repeated .google.protobuf.Any details = 7;</code>
     */
    java.util.List<? extends com.google.protobuf.AnyOrBuilder> 
        getDetailsOrBuilderList();
    /**
     * <pre>
     *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
     * </pre>
     *
     * <code>repeated .google.protobuf.Any details = 7;</code>
     */
    com.google.protobuf.AnyOrBuilder getDetailsOrBuilder(
        int index);

    /**
     * <code>int32 radio_one = 8;</code>
     */
    int getRadioOne();

    /**
     * <code>int32 radio_two = 9;</code>
     */
    int getRadioTwo();

    public com.young.proto.model.Proto3Super.RequestPage.RadioCase getRadioCase();
  }
  /**
   * <pre>
   *proto3中移除了required，并将optional改为singular
   * </pre>
   *
   * Protobuf type {@code RequestPage}
   */
  public  static final class RequestPage extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:RequestPage)
      RequestPageOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RequestPage.newBuilder() to construct.
    private RequestPage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RequestPage() {
      inner_ = java.util.Collections.emptyList();
      type_ = 0;
      deprecatedField_ = false;
      details_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.young.proto.model.Proto3Super.internal_static_RequestPage_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 6:
          return internalGetTypeMap();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.young.proto.model.Proto3Super.internal_static_RequestPage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.young.proto.model.Proto3Super.RequestPage.class, com.young.proto.model.Proto3Super.RequestPage.Builder.class);
    }

    public interface InnerObjectOrBuilder extends
        // @@protoc_insertion_point(interface_extends:RequestPage.InnerObject)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       *int32, uint32, int64, uint64,和bool是全部兼容的,超出部分会被截断
       * </pre>
       *
       * <code>int32 id = 1;</code>
       */
      int getId();

      /**
       * <pre>
       *string和bytes是兼容的——只要bytes是有效的UTF-8编码
       * </pre>
       *
       * <code>string unique = 2;</code>
       */
      java.lang.String getUnique();
      /**
       * <pre>
       *string和bytes是兼容的——只要bytes是有效的UTF-8编码
       * </pre>
       *
       * <code>string unique = 2;</code>
       */
      com.google.protobuf.ByteString
          getUniqueBytes();
    }
    /**
     * <pre>
     *指定message的包名，会被option java_package覆盖
     *package com.young.proto.moedel.inner;
     * </pre>
     *
     * Protobuf type {@code RequestPage.InnerObject}
     */
    public  static final class InnerObject extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:RequestPage.InnerObject)
        InnerObjectOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use InnerObject.newBuilder() to construct.
      private InnerObject(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private InnerObject() {
        id_ = 0;
        unique_ = "";
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.young.proto.model.Proto3Super.internal_static_RequestPage_InnerObject_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.young.proto.model.Proto3Super.internal_static_RequestPage_InnerObject_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.young.proto.model.Proto3Super.RequestPage.InnerObject.class, com.young.proto.model.Proto3Super.RequestPage.InnerObject.Builder.class);
      }

      public static final int ID_FIELD_NUMBER = 1;
      private int id_;
      /**
       * <pre>
       *int32, uint32, int64, uint64,和bool是全部兼容的,超出部分会被截断
       * </pre>
       *
       * <code>int32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }

      public static final int UNIQUE_FIELD_NUMBER = 2;
      private volatile java.lang.Object unique_;
      /**
       * <pre>
       *string和bytes是兼容的——只要bytes是有效的UTF-8编码
       * </pre>
       *
       * <code>string unique = 2;</code>
       */
      public java.lang.String getUnique() {
        java.lang.Object ref = unique_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          unique_ = s;
          return s;
        }
      }
      /**
       * <pre>
       *string和bytes是兼容的——只要bytes是有效的UTF-8编码
       * </pre>
       *
       * <code>string unique = 2;</code>
       */
      public com.google.protobuf.ByteString
          getUniqueBytes() {
        java.lang.Object ref = unique_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          unique_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static com.young.proto.model.Proto3Super.RequestPage.InnerObject parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.young.proto.model.Proto3Super.RequestPage.InnerObject parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.young.proto.model.Proto3Super.RequestPage.InnerObject parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.young.proto.model.Proto3Super.RequestPage.InnerObject parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.young.proto.model.Proto3Super.RequestPage.InnerObject parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.young.proto.model.Proto3Super.RequestPage.InnerObject parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.young.proto.model.Proto3Super.RequestPage.InnerObject parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.young.proto.model.Proto3Super.RequestPage.InnerObject parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.young.proto.model.Proto3Super.RequestPage.InnerObject parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.young.proto.model.Proto3Super.RequestPage.InnerObject parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.young.proto.model.Proto3Super.RequestPage.InnerObject parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.young.proto.model.Proto3Super.RequestPage.InnerObject parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.young.proto.model.Proto3Super.RequestPage.InnerObject prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       *指定message的包名，会被option java_package覆盖
       *package com.young.proto.moedel.inner;
       * </pre>
       *
       * Protobuf type {@code RequestPage.InnerObject}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:RequestPage.InnerObject)
          com.young.proto.model.Proto3Super.RequestPage.InnerObjectOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.young.proto.model.Proto3Super.internal_static_RequestPage_InnerObject_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.young.proto.model.Proto3Super.internal_static_RequestPage_InnerObject_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.young.proto.model.Proto3Super.RequestPage.InnerObject.class, com.young.proto.model.Proto3Super.RequestPage.InnerObject.Builder.class);
        }

        // Construct using com.young.proto.model.Proto3Super.RequestPage.InnerObject.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          id_ = 0;

          unique_ = "";

          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.young.proto.model.Proto3Super.internal_static_RequestPage_InnerObject_descriptor;
        }

        public com.young.proto.model.Proto3Super.RequestPage.InnerObject getDefaultInstanceForType() {
          return com.young.proto.model.Proto3Super.RequestPage.InnerObject.getDefaultInstance();
        }

        public com.young.proto.model.Proto3Super.RequestPage.InnerObject build() {
          com.young.proto.model.Proto3Super.RequestPage.InnerObject result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.young.proto.model.Proto3Super.RequestPage.InnerObject buildPartial() {
          com.young.proto.model.Proto3Super.RequestPage.InnerObject result = new com.young.proto.model.Proto3Super.RequestPage.InnerObject(this);
          result.id_ = id_;
          result.unique_ = unique_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }

        private int id_ ;
        /**
         * <pre>
         *int32, uint32, int64, uint64,和bool是全部兼容的,超出部分会被截断
         * </pre>
         *
         * <code>int32 id = 1;</code>
         */
        public int getId() {
          return id_;
        }
        /**
         * <pre>
         *int32, uint32, int64, uint64,和bool是全部兼容的,超出部分会被截断
         * </pre>
         *
         * <code>int32 id = 1;</code>
         */
        public Builder setId(int value) {
          
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *int32, uint32, int64, uint64,和bool是全部兼容的,超出部分会被截断
         * </pre>
         *
         * <code>int32 id = 1;</code>
         */
        public Builder clearId() {
          
          id_ = 0;
          onChanged();
          return this;
        }

        private java.lang.Object unique_ = "";
        /**
         * <pre>
         *string和bytes是兼容的——只要bytes是有效的UTF-8编码
         * </pre>
         *
         * <code>string unique = 2;</code>
         */
        public java.lang.String getUnique() {
          java.lang.Object ref = unique_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            unique_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         *string和bytes是兼容的——只要bytes是有效的UTF-8编码
         * </pre>
         *
         * <code>string unique = 2;</code>
         */
        public com.google.protobuf.ByteString
            getUniqueBytes() {
          java.lang.Object ref = unique_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            unique_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         *string和bytes是兼容的——只要bytes是有效的UTF-8编码
         * </pre>
         *
         * <code>string unique = 2;</code>
         */
        public Builder setUnique(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          unique_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *string和bytes是兼容的——只要bytes是有效的UTF-8编码
         * </pre>
         *
         * <code>string unique = 2;</code>
         */
        public Builder clearUnique() {
          
          unique_ = getDefaultInstance().getUnique();
          onChanged();
          return this;
        }
        /**
         * <pre>
         *string和bytes是兼容的——只要bytes是有效的UTF-8编码
         * </pre>
         *
         * <code>string unique = 2;</code>
         */
        public Builder setUniqueBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          unique_ = value;
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:RequestPage.InnerObject)
      }

      // @@protoc_insertion_point(class_scope:RequestPage.InnerObject)
      private static final com.young.proto.model.Proto3Super.RequestPage.InnerObject DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.young.proto.model.Proto3Super.RequestPage.InnerObject();
      }

      public static com.young.proto.model.Proto3Super.RequestPage.InnerObject getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<InnerObject>
          PARSER = new com.google.protobuf.AbstractParser<InnerObject>() {
        public InnerObject parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(
                    builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<InnerObject> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<InnerObject> getParserForType() {
        return PARSER;
      }

      public com.young.proto.model.Proto3Super.RequestPage.InnerObject getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    private int radioCase_ = 0;
    private java.lang.Object radio_;
    public enum RadioCase
        implements com.google.protobuf.Internal.EnumLite {
      RADIO_ONE(8),
      RADIO_TWO(9),
      RADIO_NOT_SET(0);
      private final int value;
      private RadioCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static RadioCase valueOf(int value) {
        return forNumber(value);
      }

      public static RadioCase forNumber(int value) {
        switch (value) {
          case 8: return RADIO_ONE;
          case 9: return RADIO_TWO;
          case 0: return RADIO_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public RadioCase
    getRadioCase() {
      return RadioCase.forNumber(
          radioCase_);
    }

    public static final int INNER_FIELD_NUMBER = 2;
    private java.util.List<com.young.proto.model.Proto3Super.RequestPage.InnerObject> inner_;
    /**
     * <pre>
     *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
     * </pre>
     *
     * <code>repeated .RequestPage.InnerObject inner = 2;</code>
     */
    public java.util.List<com.young.proto.model.Proto3Super.RequestPage.InnerObject> getInnerList() {
      return inner_;
    }
    /**
     * <pre>
     *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
     * </pre>
     *
     * <code>repeated .RequestPage.InnerObject inner = 2;</code>
     */
    public java.util.List<? extends com.young.proto.model.Proto3Super.RequestPage.InnerObjectOrBuilder> 
        getInnerOrBuilderList() {
      return inner_;
    }
    /**
     * <pre>
     *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
     * </pre>
     *
     * <code>repeated .RequestPage.InnerObject inner = 2;</code>
     */
    public int getInnerCount() {
      return inner_.size();
    }
    /**
     * <pre>
     *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
     * </pre>
     *
     * <code>repeated .RequestPage.InnerObject inner = 2;</code>
     */
    public com.young.proto.model.Proto3Super.RequestPage.InnerObject getInner(int index) {
      return inner_.get(index);
    }
    /**
     * <pre>
     *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
     * </pre>
     *
     * <code>repeated .RequestPage.InnerObject inner = 2;</code>
     */
    public com.young.proto.model.Proto3Super.RequestPage.InnerObjectOrBuilder getInnerOrBuilder(
        int index) {
      return inner_.get(index);
    }

    public static final int TYPE_FIELD_NUMBER = 3;
    private int type_;
    /**
     * <pre>
     *singular(singular，不能显式指定，默认)一个格式良好的消息应该有0个或者1个这种字段（但是不能超过1个）proto2中为optional
     * </pre>
     *
     * <code>.TYPE type = 3;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     *singular(singular，不能显式指定，默认)一个格式良好的消息应该有0个或者1个这种字段（但是不能超过1个）proto2中为optional
     * </pre>
     *
     * <code>.TYPE type = 3;</code>
     */
    public com.young.proto.model.Proto3Super.TYPE getType() {
      com.young.proto.model.Proto3Super.TYPE result = com.young.proto.model.Proto3Super.TYPE.valueOf(type_);
      return result == null ? com.young.proto.model.Proto3Super.TYPE.UNRECOGNIZED : result;
    }

    public static final int DEPRECATED_FIELD_FIELD_NUMBER = 4;
    private boolean deprecatedField_;
    /**
     * <pre>
     *在JAVA中的废弃字段，会被加上&#64;Deprecated注释
     * </pre>
     *
     * <code>bool deprecated_field = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean getDeprecatedField() {
      return deprecatedField_;
    }

    public static final int OTHER_FIELD_NUMBER = 5;
    private com.young.proto.model.extend.Proto3Extend.OtherObject other_;
    /**
     * <pre>
     *从import的proto中导入的类
     * </pre>
     *
     * <code>.com.young.proto.model.extend.OtherObject other = 5;</code>
     */
    public boolean hasOther() {
      return other_ != null;
    }
    /**
     * <pre>
     *从import的proto中导入的类
     * </pre>
     *
     * <code>.com.young.proto.model.extend.OtherObject other = 5;</code>
     */
    public com.young.proto.model.extend.Proto3Extend.OtherObject getOther() {
      return other_ == null ? com.young.proto.model.extend.Proto3Extend.OtherObject.getDefaultInstance() : other_;
    }
    /**
     * <pre>
     *从import的proto中导入的类
     * </pre>
     *
     * <code>.com.young.proto.model.extend.OtherObject other = 5;</code>
     */
    public com.young.proto.model.extend.Proto3Extend.OtherObjectOrBuilder getOtherOrBuilder() {
      return getOther();
    }

    public static final int TYPE_MAP_FIELD_NUMBER = 6;
    private static final class TypeMapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Integer>newDefaultInstance(
                  com.young.proto.model.Proto3Super.internal_static_RequestPage_TypeMapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.ENUM,
                  com.young.proto.model.Proto3Super.TYPE.TYPE_ONE.getNumber());
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Integer> typeMap_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
    internalGetTypeMap() {
      if (typeMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            TypeMapDefaultEntryHolder.defaultEntry);
      }
      return typeMap_;
    }
    private static final
    com.google.protobuf.Internal.MapAdapter.Converter<
        java.lang.Integer, com.young.proto.model.Proto3Super.TYPE> typeMapValueConverter =
            com.google.protobuf.Internal.MapAdapter.newEnumConverter(
                com.young.proto.model.Proto3Super.TYPE.internalGetValueMap(),
                com.young.proto.model.Proto3Super.TYPE.UNRECOGNIZED);
    private static final java.util.Map<java.lang.String, com.young.proto.model.Proto3Super.TYPE>
    internalGetAdaptedTypeMapMap(
        java.util.Map<java.lang.String, java.lang.Integer> map) {
      return new com.google.protobuf.Internal.MapAdapter<
          java.lang.String, com.young.proto.model.Proto3Super.TYPE, java.lang.Integer>(
              map, typeMapValueConverter);
    }

    public int getTypeMapCount() {
      return internalGetTypeMap().getMap().size();
    }
    /**
     * <pre>
     *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
     *value_type可以是任意类型
     *序列化后的顺序和map迭代器的顺序是不确定
     *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
     * </pre>
     *
     * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
     */

    public boolean containsTypeMap(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetTypeMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getTypeMapMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.young.proto.model.Proto3Super.TYPE>
    getTypeMap() {
      return getTypeMapMap();
    }
    /**
     * <pre>
     *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
     *value_type可以是任意类型
     *序列化后的顺序和map迭代器的顺序是不确定
     *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
     * </pre>
     *
     * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
     */

    public java.util.Map<java.lang.String, com.young.proto.model.Proto3Super.TYPE>
    getTypeMapMap() {
      return internalGetAdaptedTypeMapMap(
          internalGetTypeMap().getMap());}
    /**
     * <pre>
     *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
     *value_type可以是任意类型
     *序列化后的顺序和map迭代器的顺序是不确定
     *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
     * </pre>
     *
     * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
     */

    public com.young.proto.model.Proto3Super.TYPE getTypeMapOrDefault(
        java.lang.String key,
        com.young.proto.model.Proto3Super.TYPE defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetTypeMap().getMap();
      return map.containsKey(key)
             ? typeMapValueConverter.doForward(map.get(key))
             : defaultValue;
    }
    /**
     * <pre>
     *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
     *value_type可以是任意类型
     *序列化后的顺序和map迭代器的顺序是不确定
     *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
     * </pre>
     *
     * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
     */

    public com.young.proto.model.Proto3Super.TYPE getTypeMapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetTypeMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return typeMapValueConverter.doForward(map.get(key));
    }
    /**
     * Use {@link #getTypeMapValueMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer>
    getTypeMapValue() {
      return getTypeMapValueMap();
    }
    /**
     * <pre>
     *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
     *value_type可以是任意类型
     *序列化后的顺序和map迭代器的顺序是不确定
     *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
     * </pre>
     *
     * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
     */

    public java.util.Map<java.lang.String, java.lang.Integer>
    getTypeMapValueMap() {
      return internalGetTypeMap().getMap();
    }
    /**
     * <pre>
     *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
     *value_type可以是任意类型
     *序列化后的顺序和map迭代器的顺序是不确定
     *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
     * </pre>
     *
     * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
     */

    public int getTypeMapValueOrDefault(
        java.lang.String key,
        int defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetTypeMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
     *value_type可以是任意类型
     *序列化后的顺序和map迭代器的顺序是不确定
     *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
     * </pre>
     *
     * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
     */

    public int getTypeMapValueOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetTypeMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int DETAILS_FIELD_NUMBER = 7;
    private java.util.List<com.google.protobuf.Any> details_;
    /**
     * <pre>
     *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
     * </pre>
     *
     * <code>repeated .google.protobuf.Any details = 7;</code>
     */
    public java.util.List<com.google.protobuf.Any> getDetailsList() {
      return details_;
    }
    /**
     * <pre>
     *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
     * </pre>
     *
     * <code>repeated .google.protobuf.Any details = 7;</code>
     */
    public java.util.List<? extends com.google.protobuf.AnyOrBuilder> 
        getDetailsOrBuilderList() {
      return details_;
    }
    /**
     * <pre>
     *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
     * </pre>
     *
     * <code>repeated .google.protobuf.Any details = 7;</code>
     */
    public int getDetailsCount() {
      return details_.size();
    }
    /**
     * <pre>
     *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
     * </pre>
     *
     * <code>repeated .google.protobuf.Any details = 7;</code>
     */
    public com.google.protobuf.Any getDetails(int index) {
      return details_.get(index);
    }
    /**
     * <pre>
     *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
     * </pre>
     *
     * <code>repeated .google.protobuf.Any details = 7;</code>
     */
    public com.google.protobuf.AnyOrBuilder getDetailsOrBuilder(
        int index) {
      return details_.get(index);
    }

    public static final int RADIO_ONE_FIELD_NUMBER = 8;
    /**
     * <code>int32 radio_one = 8;</code>
     */
    public int getRadioOne() {
      if (radioCase_ == 8) {
        return (java.lang.Integer) radio_;
      }
      return 0;
    }

    public static final int RADIO_TWO_FIELD_NUMBER = 9;
    /**
     * <code>int32 radio_two = 9;</code>
     */
    public int getRadioTwo() {
      if (radioCase_ == 9) {
        return (java.lang.Integer) radio_;
      }
      return 0;
    }

    public static com.young.proto.model.Proto3Super.RequestPage parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.young.proto.model.Proto3Super.RequestPage parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.young.proto.model.Proto3Super.RequestPage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.young.proto.model.Proto3Super.RequestPage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.young.proto.model.Proto3Super.RequestPage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.young.proto.model.Proto3Super.RequestPage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.young.proto.model.Proto3Super.RequestPage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.young.proto.model.Proto3Super.RequestPage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.young.proto.model.Proto3Super.RequestPage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.young.proto.model.Proto3Super.RequestPage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.young.proto.model.Proto3Super.RequestPage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.young.proto.model.Proto3Super.RequestPage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.young.proto.model.Proto3Super.RequestPage prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *proto3中移除了required，并将optional改为singular
     * </pre>
     *
     * Protobuf type {@code RequestPage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:RequestPage)
        com.young.proto.model.Proto3Super.RequestPageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.young.proto.model.Proto3Super.internal_static_RequestPage_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 6:
            return internalGetTypeMap();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 6:
            return internalGetMutableTypeMap();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.young.proto.model.Proto3Super.internal_static_RequestPage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.young.proto.model.Proto3Super.RequestPage.class, com.young.proto.model.Proto3Super.RequestPage.Builder.class);
      }

      // Construct using com.young.proto.model.Proto3Super.RequestPage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getInnerFieldBuilder();
          getDetailsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (innerBuilder_ == null) {
          inner_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          innerBuilder_.clear();
        }
        type_ = 0;

        deprecatedField_ = false;

        if (otherBuilder_ == null) {
          other_ = null;
        } else {
          other_ = null;
          otherBuilder_ = null;
        }
        internalGetMutableTypeMap().clear();
        if (detailsBuilder_ == null) {
          details_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          detailsBuilder_.clear();
        }
        radioCase_ = 0;
        radio_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.young.proto.model.Proto3Super.internal_static_RequestPage_descriptor;
      }

      public com.young.proto.model.Proto3Super.RequestPage getDefaultInstanceForType() {
        return com.young.proto.model.Proto3Super.RequestPage.getDefaultInstance();
      }

      public com.young.proto.model.Proto3Super.RequestPage build() {
        com.young.proto.model.Proto3Super.RequestPage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.young.proto.model.Proto3Super.RequestPage buildPartial() {
        com.young.proto.model.Proto3Super.RequestPage result = new com.young.proto.model.Proto3Super.RequestPage(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (innerBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            inner_ = java.util.Collections.unmodifiableList(inner_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.inner_ = inner_;
        } else {
          result.inner_ = innerBuilder_.build();
        }
        result.type_ = type_;
        result.deprecatedField_ = deprecatedField_;
        if (otherBuilder_ == null) {
          result.other_ = other_;
        } else {
          result.other_ = otherBuilder_.build();
        }
        result.typeMap_ = internalGetTypeMap();
        result.typeMap_.makeImmutable();
        if (detailsBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            details_ = java.util.Collections.unmodifiableList(details_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.details_ = details_;
        } else {
          result.details_ = detailsBuilder_.build();
        }
        if (radioCase_ == 8) {
          result.radio_ = radio_;
        }
        if (radioCase_ == 9) {
          result.radio_ = radio_;
        }
        result.bitField0_ = to_bitField0_;
        result.radioCase_ = radioCase_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      private int radioCase_ = 0;
      private java.lang.Object radio_;
      public RadioCase
          getRadioCase() {
        return RadioCase.forNumber(
            radioCase_);
      }

      public Builder clearRadio() {
        radioCase_ = 0;
        radio_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private java.util.List<com.young.proto.model.Proto3Super.RequestPage.InnerObject> inner_ =
        java.util.Collections.emptyList();
      private void ensureInnerIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          inner_ = new java.util.ArrayList<com.young.proto.model.Proto3Super.RequestPage.InnerObject>(inner_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.young.proto.model.Proto3Super.RequestPage.InnerObject, com.young.proto.model.Proto3Super.RequestPage.InnerObject.Builder, com.young.proto.model.Proto3Super.RequestPage.InnerObjectOrBuilder> innerBuilder_;

      /**
       * <pre>
       *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
       * </pre>
       *
       * <code>repeated .RequestPage.InnerObject inner = 2;</code>
       */
      public java.util.List<com.young.proto.model.Proto3Super.RequestPage.InnerObject> getInnerList() {
        if (innerBuilder_ == null) {
          return java.util.Collections.unmodifiableList(inner_);
        } else {
          return innerBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
       * </pre>
       *
       * <code>repeated .RequestPage.InnerObject inner = 2;</code>
       */
      public int getInnerCount() {
        if (innerBuilder_ == null) {
          return inner_.size();
        } else {
          return innerBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
       * </pre>
       *
       * <code>repeated .RequestPage.InnerObject inner = 2;</code>
       */
      public com.young.proto.model.Proto3Super.RequestPage.InnerObject getInner(int index) {
        if (innerBuilder_ == null) {
          return inner_.get(index);
        } else {
          return innerBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
       * </pre>
       *
       * <code>repeated .RequestPage.InnerObject inner = 2;</code>
       */
      public Builder setInner(
          int index, com.young.proto.model.Proto3Super.RequestPage.InnerObject value) {
        if (innerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInnerIsMutable();
          inner_.set(index, value);
          onChanged();
        } else {
          innerBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
       * </pre>
       *
       * <code>repeated .RequestPage.InnerObject inner = 2;</code>
       */
      public Builder setInner(
          int index, com.young.proto.model.Proto3Super.RequestPage.InnerObject.Builder builderForValue) {
        if (innerBuilder_ == null) {
          ensureInnerIsMutable();
          inner_.set(index, builderForValue.build());
          onChanged();
        } else {
          innerBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
       * </pre>
       *
       * <code>repeated .RequestPage.InnerObject inner = 2;</code>
       */
      public Builder addInner(com.young.proto.model.Proto3Super.RequestPage.InnerObject value) {
        if (innerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInnerIsMutable();
          inner_.add(value);
          onChanged();
        } else {
          innerBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
       * </pre>
       *
       * <code>repeated .RequestPage.InnerObject inner = 2;</code>
       */
      public Builder addInner(
          int index, com.young.proto.model.Proto3Super.RequestPage.InnerObject value) {
        if (innerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInnerIsMutable();
          inner_.add(index, value);
          onChanged();
        } else {
          innerBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
       * </pre>
       *
       * <code>repeated .RequestPage.InnerObject inner = 2;</code>
       */
      public Builder addInner(
          com.young.proto.model.Proto3Super.RequestPage.InnerObject.Builder builderForValue) {
        if (innerBuilder_ == null) {
          ensureInnerIsMutable();
          inner_.add(builderForValue.build());
          onChanged();
        } else {
          innerBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
       * </pre>
       *
       * <code>repeated .RequestPage.InnerObject inner = 2;</code>
       */
      public Builder addInner(
          int index, com.young.proto.model.Proto3Super.RequestPage.InnerObject.Builder builderForValue) {
        if (innerBuilder_ == null) {
          ensureInnerIsMutable();
          inner_.add(index, builderForValue.build());
          onChanged();
        } else {
          innerBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
       * </pre>
       *
       * <code>repeated .RequestPage.InnerObject inner = 2;</code>
       */
      public Builder addAllInner(
          java.lang.Iterable<? extends com.young.proto.model.Proto3Super.RequestPage.InnerObject> values) {
        if (innerBuilder_ == null) {
          ensureInnerIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, inner_);
          onChanged();
        } else {
          innerBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
       * </pre>
       *
       * <code>repeated .RequestPage.InnerObject inner = 2;</code>
       */
      public Builder clearInner() {
        if (innerBuilder_ == null) {
          inner_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          innerBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
       * </pre>
       *
       * <code>repeated .RequestPage.InnerObject inner = 2;</code>
       */
      public Builder removeInner(int index) {
        if (innerBuilder_ == null) {
          ensureInnerIsMutable();
          inner_.remove(index);
          onChanged();
        } else {
          innerBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
       * </pre>
       *
       * <code>repeated .RequestPage.InnerObject inner = 2;</code>
       */
      public com.young.proto.model.Proto3Super.RequestPage.InnerObject.Builder getInnerBuilder(
          int index) {
        return getInnerFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
       * </pre>
       *
       * <code>repeated .RequestPage.InnerObject inner = 2;</code>
       */
      public com.young.proto.model.Proto3Super.RequestPage.InnerObjectOrBuilder getInnerOrBuilder(
          int index) {
        if (innerBuilder_ == null) {
          return inner_.get(index);  } else {
          return innerBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
       * </pre>
       *
       * <code>repeated .RequestPage.InnerObject inner = 2;</code>
       */
      public java.util.List<? extends com.young.proto.model.Proto3Super.RequestPage.InnerObjectOrBuilder> 
           getInnerOrBuilderList() {
        if (innerBuilder_ != null) {
          return innerBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(inner_);
        }
      }
      /**
       * <pre>
       *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
       * </pre>
       *
       * <code>repeated .RequestPage.InnerObject inner = 2;</code>
       */
      public com.young.proto.model.Proto3Super.RequestPage.InnerObject.Builder addInnerBuilder() {
        return getInnerFieldBuilder().addBuilder(
            com.young.proto.model.Proto3Super.RequestPage.InnerObject.getDefaultInstance());
      }
      /**
       * <pre>
       *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
       * </pre>
       *
       * <code>repeated .RequestPage.InnerObject inner = 2;</code>
       */
      public com.young.proto.model.Proto3Super.RequestPage.InnerObject.Builder addInnerBuilder(
          int index) {
        return getInnerFieldBuilder().addBuilder(
            index, com.young.proto.model.Proto3Super.RequestPage.InnerObject.getDefaultInstance());
      }
      /**
       * <pre>
       *在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留(对应Java中的List)。
       * </pre>
       *
       * <code>repeated .RequestPage.InnerObject inner = 2;</code>
       */
      public java.util.List<com.young.proto.model.Proto3Super.RequestPage.InnerObject.Builder> 
           getInnerBuilderList() {
        return getInnerFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.young.proto.model.Proto3Super.RequestPage.InnerObject, com.young.proto.model.Proto3Super.RequestPage.InnerObject.Builder, com.young.proto.model.Proto3Super.RequestPage.InnerObjectOrBuilder> 
          getInnerFieldBuilder() {
        if (innerBuilder_ == null) {
          innerBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.young.proto.model.Proto3Super.RequestPage.InnerObject, com.young.proto.model.Proto3Super.RequestPage.InnerObject.Builder, com.young.proto.model.Proto3Super.RequestPage.InnerObjectOrBuilder>(
                  inner_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          inner_ = null;
        }
        return innerBuilder_;
      }

      private int type_ = 0;
      /**
       * <pre>
       *singular(singular，不能显式指定，默认)一个格式良好的消息应该有0个或者1个这种字段（但是不能超过1个）proto2中为optional
       * </pre>
       *
       * <code>.TYPE type = 3;</code>
       */
      public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       *singular(singular，不能显式指定，默认)一个格式良好的消息应该有0个或者1个这种字段（但是不能超过1个）proto2中为optional
       * </pre>
       *
       * <code>.TYPE type = 3;</code>
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *singular(singular，不能显式指定，默认)一个格式良好的消息应该有0个或者1个这种字段（但是不能超过1个）proto2中为optional
       * </pre>
       *
       * <code>.TYPE type = 3;</code>
       */
      public com.young.proto.model.Proto3Super.TYPE getType() {
        com.young.proto.model.Proto3Super.TYPE result = com.young.proto.model.Proto3Super.TYPE.valueOf(type_);
        return result == null ? com.young.proto.model.Proto3Super.TYPE.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *singular(singular，不能显式指定，默认)一个格式良好的消息应该有0个或者1个这种字段（但是不能超过1个）proto2中为optional
       * </pre>
       *
       * <code>.TYPE type = 3;</code>
       */
      public Builder setType(com.young.proto.model.Proto3Super.TYPE value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *singular(singular，不能显式指定，默认)一个格式良好的消息应该有0个或者1个这种字段（但是不能超过1个）proto2中为optional
       * </pre>
       *
       * <code>.TYPE type = 3;</code>
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }

      private boolean deprecatedField_ ;
      /**
       * <pre>
       *在JAVA中的废弃字段，会被加上&#64;Deprecated注释
       * </pre>
       *
       * <code>bool deprecated_field = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean getDeprecatedField() {
        return deprecatedField_;
      }
      /**
       * <pre>
       *在JAVA中的废弃字段，会被加上&#64;Deprecated注释
       * </pre>
       *
       * <code>bool deprecated_field = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setDeprecatedField(boolean value) {
        
        deprecatedField_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *在JAVA中的废弃字段，会被加上&#64;Deprecated注释
       * </pre>
       *
       * <code>bool deprecated_field = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearDeprecatedField() {
        
        deprecatedField_ = false;
        onChanged();
        return this;
      }

      private com.young.proto.model.extend.Proto3Extend.OtherObject other_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.young.proto.model.extend.Proto3Extend.OtherObject, com.young.proto.model.extend.Proto3Extend.OtherObject.Builder, com.young.proto.model.extend.Proto3Extend.OtherObjectOrBuilder> otherBuilder_;
      /**
       * <pre>
       *从import的proto中导入的类
       * </pre>
       *
       * <code>.com.young.proto.model.extend.OtherObject other = 5;</code>
       */
      public boolean hasOther() {
        return otherBuilder_ != null || other_ != null;
      }
      /**
       * <pre>
       *从import的proto中导入的类
       * </pre>
       *
       * <code>.com.young.proto.model.extend.OtherObject other = 5;</code>
       */
      public com.young.proto.model.extend.Proto3Extend.OtherObject getOther() {
        if (otherBuilder_ == null) {
          return other_ == null ? com.young.proto.model.extend.Proto3Extend.OtherObject.getDefaultInstance() : other_;
        } else {
          return otherBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *从import的proto中导入的类
       * </pre>
       *
       * <code>.com.young.proto.model.extend.OtherObject other = 5;</code>
       */
      public Builder setOther(com.young.proto.model.extend.Proto3Extend.OtherObject value) {
        if (otherBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          other_ = value;
          onChanged();
        } else {
          otherBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *从import的proto中导入的类
       * </pre>
       *
       * <code>.com.young.proto.model.extend.OtherObject other = 5;</code>
       */
      public Builder setOther(
          com.young.proto.model.extend.Proto3Extend.OtherObject.Builder builderForValue) {
        if (otherBuilder_ == null) {
          other_ = builderForValue.build();
          onChanged();
        } else {
          otherBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *从import的proto中导入的类
       * </pre>
       *
       * <code>.com.young.proto.model.extend.OtherObject other = 5;</code>
       */
      public Builder mergeOther(com.young.proto.model.extend.Proto3Extend.OtherObject value) {
        if (otherBuilder_ == null) {
          if (other_ != null) {
            other_ =
              com.young.proto.model.extend.Proto3Extend.OtherObject.newBuilder(other_).mergeFrom(value).buildPartial();
          } else {
            other_ = value;
          }
          onChanged();
        } else {
          otherBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *从import的proto中导入的类
       * </pre>
       *
       * <code>.com.young.proto.model.extend.OtherObject other = 5;</code>
       */
      public Builder clearOther() {
        if (otherBuilder_ == null) {
          other_ = null;
          onChanged();
        } else {
          other_ = null;
          otherBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *从import的proto中导入的类
       * </pre>
       *
       * <code>.com.young.proto.model.extend.OtherObject other = 5;</code>
       */
      public com.young.proto.model.extend.Proto3Extend.OtherObject.Builder getOtherBuilder() {
        
        onChanged();
        return getOtherFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *从import的proto中导入的类
       * </pre>
       *
       * <code>.com.young.proto.model.extend.OtherObject other = 5;</code>
       */
      public com.young.proto.model.extend.Proto3Extend.OtherObjectOrBuilder getOtherOrBuilder() {
        if (otherBuilder_ != null) {
          return otherBuilder_.getMessageOrBuilder();
        } else {
          return other_ == null ?
              com.young.proto.model.extend.Proto3Extend.OtherObject.getDefaultInstance() : other_;
        }
      }
      /**
       * <pre>
       *从import的proto中导入的类
       * </pre>
       *
       * <code>.com.young.proto.model.extend.OtherObject other = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.young.proto.model.extend.Proto3Extend.OtherObject, com.young.proto.model.extend.Proto3Extend.OtherObject.Builder, com.young.proto.model.extend.Proto3Extend.OtherObjectOrBuilder> 
          getOtherFieldBuilder() {
        if (otherBuilder_ == null) {
          otherBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.young.proto.model.extend.Proto3Extend.OtherObject, com.young.proto.model.extend.Proto3Extend.OtherObject.Builder, com.young.proto.model.extend.Proto3Extend.OtherObjectOrBuilder>(
                  getOther(),
                  getParentForChildren(),
                  isClean());
          other_ = null;
        }
        return otherBuilder_;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Integer> typeMap_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
      internalGetTypeMap() {
        if (typeMap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              TypeMapDefaultEntryHolder.defaultEntry);
        }
        return typeMap_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
      internalGetMutableTypeMap() {
        onChanged();;
        if (typeMap_ == null) {
          typeMap_ = com.google.protobuf.MapField.newMapField(
              TypeMapDefaultEntryHolder.defaultEntry);
        }
        if (!typeMap_.isMutable()) {
          typeMap_ = typeMap_.copy();
        }
        return typeMap_;
      }

      public int getTypeMapCount() {
        return internalGetTypeMap().getMap().size();
      }
      /**
       * <pre>
       *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
       *value_type可以是任意类型
       *序列化后的顺序和map迭代器的顺序是不确定
       *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
       * </pre>
       *
       * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
       */

      public boolean containsTypeMap(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetTypeMap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getTypeMapMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.young.proto.model.Proto3Super.TYPE>
      getTypeMap() {
        return getTypeMapMap();
      }
      /**
       * <pre>
       *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
       *value_type可以是任意类型
       *序列化后的顺序和map迭代器的顺序是不确定
       *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
       * </pre>
       *
       * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
       */

      public java.util.Map<java.lang.String, com.young.proto.model.Proto3Super.TYPE>
      getTypeMapMap() {
        return internalGetAdaptedTypeMapMap(
            internalGetTypeMap().getMap());}
      /**
       * <pre>
       *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
       *value_type可以是任意类型
       *序列化后的顺序和map迭代器的顺序是不确定
       *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
       * </pre>
       *
       * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
       */

      public com.young.proto.model.Proto3Super.TYPE getTypeMapOrDefault(
          java.lang.String key,
          com.young.proto.model.Proto3Super.TYPE defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetTypeMap().getMap();
        return map.containsKey(key)
               ? typeMapValueConverter.doForward(map.get(key))
               : defaultValue;
      }
      /**
       * <pre>
       *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
       *value_type可以是任意类型
       *序列化后的顺序和map迭代器的顺序是不确定
       *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
       * </pre>
       *
       * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
       */

      public com.young.proto.model.Proto3Super.TYPE getTypeMapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetTypeMap().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return typeMapValueConverter.doForward(map.get(key));
      }
      /**
       * Use {@link #getTypeMapValueMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer>
      getTypeMapValue() {
        return getTypeMapValueMap();
      }
      /**
       * <pre>
       *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
       *value_type可以是任意类型
       *序列化后的顺序和map迭代器的顺序是不确定
       *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
       * </pre>
       *
       * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
       */

      public java.util.Map<java.lang.String, java.lang.Integer>
      getTypeMapValueMap() {
        return internalGetTypeMap().getMap();
      }
      /**
       * <pre>
       *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
       *value_type可以是任意类型
       *序列化后的顺序和map迭代器的顺序是不确定
       *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
       * </pre>
       *
       * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
       */

      public int getTypeMapValueOrDefault(
          java.lang.String key,
          int defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetTypeMap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
       *value_type可以是任意类型
       *序列化后的顺序和map迭代器的顺序是不确定
       *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
       * </pre>
       *
       * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
       */

      public int getTypeMapValueOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetTypeMap().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearTypeMap() {
        internalGetMutableTypeMap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
       *value_type可以是任意类型
       *序列化后的顺序和map迭代器的顺序是不确定
       *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
       * </pre>
       *
       * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
       */

      public Builder removeTypeMap(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableTypeMap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.young.proto.model.Proto3Super.TYPE>
      getMutableTypeMap() {
        return internalGetAdaptedTypeMapMap(
             internalGetMutableTypeMap().getMutableMap());
      }
      /**
       * <pre>
       *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
       *value_type可以是任意类型
       *序列化后的顺序和map迭代器的顺序是不确定
       *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
       * </pre>
       *
       * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
       */
      public Builder putTypeMap(
          java.lang.String key,
          com.young.proto.model.Proto3Super.TYPE value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableTypeMap().getMutableMap()
            .put(key, typeMapValueConverter.doBackward(value));
        return this;
      }
      /**
       * <pre>
       *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
       *value_type可以是任意类型
       *序列化后的顺序和map迭代器的顺序是不确定
       *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
       * </pre>
       *
       * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
       */
      public Builder putAllTypeMap(
          java.util.Map<java.lang.String, com.young.proto.model.Proto3Super.TYPE> values) {
        internalGetAdaptedTypeMapMap(
            internalGetMutableTypeMap().getMutableMap())
                .putAll(values);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer>
      getMutableTypeMapValue() {
        return internalGetMutableTypeMap().getMutableMap();
      }
      /**
       * <pre>
       *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
       *value_type可以是任意类型
       *序列化后的顺序和map迭代器的顺序是不确定
       *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
       * </pre>
       *
       * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
       */
      public Builder putTypeMapValue(
          java.lang.String key,
          int value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableTypeMap().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       *key_type可以是任意Integer或者string类型（除了floating和bytes的任意标量类型）
       *value_type可以是任意类型
       *序列化后的顺序和map迭代器的顺序是不确定
       *从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用
       * </pre>
       *
       * <code>map&lt;string, .TYPE&gt; type_map = 6;</code>
       */
      public Builder putAllTypeMapValue(
          java.util.Map<java.lang.String, java.lang.Integer> values) {
        internalGetMutableTypeMap().getMutableMap()
            .putAll(values);
        return this;
      }

      private java.util.List<com.google.protobuf.Any> details_ =
        java.util.Collections.emptyList();
      private void ensureDetailsIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          details_ = new java.util.ArrayList<com.google.protobuf.Any>(details_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> detailsBuilder_;

      /**
       * <pre>
       *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
       * </pre>
       *
       * <code>repeated .google.protobuf.Any details = 7;</code>
       */
      public java.util.List<com.google.protobuf.Any> getDetailsList() {
        if (detailsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(details_);
        } else {
          return detailsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
       * </pre>
       *
       * <code>repeated .google.protobuf.Any details = 7;</code>
       */
      public int getDetailsCount() {
        if (detailsBuilder_ == null) {
          return details_.size();
        } else {
          return detailsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
       * </pre>
       *
       * <code>repeated .google.protobuf.Any details = 7;</code>
       */
      public com.google.protobuf.Any getDetails(int index) {
        if (detailsBuilder_ == null) {
          return details_.get(index);
        } else {
          return detailsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
       * </pre>
       *
       * <code>repeated .google.protobuf.Any details = 7;</code>
       */
      public Builder setDetails(
          int index, com.google.protobuf.Any value) {
        if (detailsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailsIsMutable();
          details_.set(index, value);
          onChanged();
        } else {
          detailsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
       * </pre>
       *
       * <code>repeated .google.protobuf.Any details = 7;</code>
       */
      public Builder setDetails(
          int index, com.google.protobuf.Any.Builder builderForValue) {
        if (detailsBuilder_ == null) {
          ensureDetailsIsMutable();
          details_.set(index, builderForValue.build());
          onChanged();
        } else {
          detailsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
       * </pre>
       *
       * <code>repeated .google.protobuf.Any details = 7;</code>
       */
      public Builder addDetails(com.google.protobuf.Any value) {
        if (detailsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailsIsMutable();
          details_.add(value);
          onChanged();
        } else {
          detailsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
       * </pre>
       *
       * <code>repeated .google.protobuf.Any details = 7;</code>
       */
      public Builder addDetails(
          int index, com.google.protobuf.Any value) {
        if (detailsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailsIsMutable();
          details_.add(index, value);
          onChanged();
        } else {
          detailsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
       * </pre>
       *
       * <code>repeated .google.protobuf.Any details = 7;</code>
       */
      public Builder addDetails(
          com.google.protobuf.Any.Builder builderForValue) {
        if (detailsBuilder_ == null) {
          ensureDetailsIsMutable();
          details_.add(builderForValue.build());
          onChanged();
        } else {
          detailsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
       * </pre>
       *
       * <code>repeated .google.protobuf.Any details = 7;</code>
       */
      public Builder addDetails(
          int index, com.google.protobuf.Any.Builder builderForValue) {
        if (detailsBuilder_ == null) {
          ensureDetailsIsMutable();
          details_.add(index, builderForValue.build());
          onChanged();
        } else {
          detailsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
       * </pre>
       *
       * <code>repeated .google.protobuf.Any details = 7;</code>
       */
      public Builder addAllDetails(
          java.lang.Iterable<? extends com.google.protobuf.Any> values) {
        if (detailsBuilder_ == null) {
          ensureDetailsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, details_);
          onChanged();
        } else {
          detailsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
       * </pre>
       *
       * <code>repeated .google.protobuf.Any details = 7;</code>
       */
      public Builder clearDetails() {
        if (detailsBuilder_ == null) {
          details_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          detailsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
       * </pre>
       *
       * <code>repeated .google.protobuf.Any details = 7;</code>
       */
      public Builder removeDetails(int index) {
        if (detailsBuilder_ == null) {
          ensureDetailsIsMutable();
          details_.remove(index);
          onChanged();
        } else {
          detailsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
       * </pre>
       *
       * <code>repeated .google.protobuf.Any details = 7;</code>
       */
      public com.google.protobuf.Any.Builder getDetailsBuilder(
          int index) {
        return getDetailsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
       * </pre>
       *
       * <code>repeated .google.protobuf.Any details = 7;</code>
       */
      public com.google.protobuf.AnyOrBuilder getDetailsOrBuilder(
          int index) {
        if (detailsBuilder_ == null) {
          return details_.get(index);  } else {
          return detailsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
       * </pre>
       *
       * <code>repeated .google.protobuf.Any details = 7;</code>
       */
      public java.util.List<? extends com.google.protobuf.AnyOrBuilder> 
           getDetailsOrBuilderList() {
        if (detailsBuilder_ != null) {
          return detailsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(details_);
        }
      }
      /**
       * <pre>
       *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
       * </pre>
       *
       * <code>repeated .google.protobuf.Any details = 7;</code>
       */
      public com.google.protobuf.Any.Builder addDetailsBuilder() {
        return getDetailsFieldBuilder().addBuilder(
            com.google.protobuf.Any.getDefaultInstance());
      }
      /**
       * <pre>
       *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
       * </pre>
       *
       * <code>repeated .google.protobuf.Any details = 7;</code>
       */
      public com.google.protobuf.Any.Builder addDetailsBuilder(
          int index) {
        return getDetailsFieldBuilder().addBuilder(
            index, com.google.protobuf.Any.getDefaultInstance());
      }
      /**
       * <pre>
       *一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型
       * </pre>
       *
       * <code>repeated .google.protobuf.Any details = 7;</code>
       */
      public java.util.List<com.google.protobuf.Any.Builder> 
           getDetailsBuilderList() {
        return getDetailsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> 
          getDetailsFieldBuilder() {
        if (detailsBuilder_ == null) {
          detailsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder>(
                  details_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          details_ = null;
        }
        return detailsBuilder_;
      }

      /**
       * <code>int32 radio_one = 8;</code>
       */
      public int getRadioOne() {
        if (radioCase_ == 8) {
          return (java.lang.Integer) radio_;
        }
        return 0;
      }
      /**
       * <code>int32 radio_one = 8;</code>
       */
      public Builder setRadioOne(int value) {
        radioCase_ = 8;
        radio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 radio_one = 8;</code>
       */
      public Builder clearRadioOne() {
        if (radioCase_ == 8) {
          radioCase_ = 0;
          radio_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>int32 radio_two = 9;</code>
       */
      public int getRadioTwo() {
        if (radioCase_ == 9) {
          return (java.lang.Integer) radio_;
        }
        return 0;
      }
      /**
       * <code>int32 radio_two = 9;</code>
       */
      public Builder setRadioTwo(int value) {
        radioCase_ = 9;
        radio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 radio_two = 9;</code>
       */
      public Builder clearRadioTwo() {
        if (radioCase_ == 9) {
          radioCase_ = 0;
          radio_ = null;
          onChanged();
        }
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:RequestPage)
    }

    // @@protoc_insertion_point(class_scope:RequestPage)
    private static final com.young.proto.model.Proto3Super.RequestPage DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.young.proto.model.Proto3Super.RequestPage();
    }

    public static com.young.proto.model.Proto3Super.RequestPage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RequestPage>
        PARSER = new com.google.protobuf.AbstractParser<RequestPage>() {
      public RequestPage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(
                  builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<RequestPage> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RequestPage> getParserForType() {
      return PARSER;
    }

    public com.young.proto.model.Proto3Super.RequestPage getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_RequestPage_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_RequestPage_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_RequestPage_TypeMapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_RequestPage_TypeMapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_RequestPage_InnerObject_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_RequestPage_InnerObject_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\023proto3Example.proto\032\022proto3Extend.prot" +
      "o\032\031google/protobuf/any.proto\"\260\003\n\013Request" +
      "Page\022\'\n\005inner\030\002 \003(\0132\030.RequestPage.InnerO" +
      "bject\022\023\n\004type\030\003 \001(\0162\005.TYPE\022\034\n\020deprecated" +
      "_field\030\004 \001(\010B\002\030\001\0228\n\005other\030\005 \001(\0132).com.yo" +
      "ung.proto.model.extend.OtherObject\022+\n\010ty" +
      "pe_map\030\006 \003(\0132\031.RequestPage.TypeMapEntry\022" +
      "%\n\007details\030\007 \003(\0132\024.google.protobuf.Any\022\023" +
      "\n\tradio_one\030\010 \001(\005H\000\022\023\n\tradio_two\030\t \001(\005H\000" +
      "\0325\n\014TypeMapEntry\022\013\n\003key\030\001 \001(\t\022\024\n\005value\030\002" +
      " \001(\0162\005.TYPE:\0028\001\032)\n\013InnerObject\022\n\n\002id\030\001 \001" +
      "(\005\022\016\n\006unique\030\002 \001(\tB\007\n\005RadioJ\004\010\001\020\002J\004\010\013\020\014R" +
      "\013alreadyUsedR\tcannotUse*K\n\004TYPE\022\014\n\010TYPE_" +
      "ONE\020\000\022\014\n\010TYPE_TWO\020\001\022\016\n\nTYPE_THREE\020\002\022\023\n\017T" +
      "YPE_LIKE_THREE\020\002\032\002\020\001B&\n\025com.young.proto." +
      "modelB\013Proto3SuperH\002b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.young.proto.model.extend.Proto3Extend.getDescriptor(),
          com.google.protobuf.AnyProto.getDescriptor(),
        }, assigner);
    internal_static_RequestPage_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_RequestPage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_RequestPage_descriptor,
        new java.lang.String[] { "Inner", "Type", "DeprecatedField", "Other", "TypeMap", "Details", "RadioOne", "RadioTwo", "Radio", });
    internal_static_RequestPage_TypeMapEntry_descriptor =
      internal_static_RequestPage_descriptor.getNestedTypes().get(0);
    internal_static_RequestPage_TypeMapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_RequestPage_TypeMapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_RequestPage_InnerObject_descriptor =
      internal_static_RequestPage_descriptor.getNestedTypes().get(1);
    internal_static_RequestPage_InnerObject_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_RequestPage_InnerObject_descriptor,
        new java.lang.String[] { "Id", "Unique", });
    com.young.proto.model.extend.Proto3Extend.getDescriptor();
    com.google.protobuf.AnyProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
